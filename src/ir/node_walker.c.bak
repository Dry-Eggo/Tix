#include "../internals.h"
#include "ir_gen.h"
#include <stdio.h>
#include <stdlib.h>

static char **source;
typedef struct {
  Type ty;
  TIR_Value *value;
} Expr_result;
void Node_init(Node_Walker *n, Program *p) {
  n->program = p;
  n->list = (IR_list *)malloc(sizeof(IR_list));
  n->list->insts = (TIR_Instruction **)malloc(64 * 8);
  n->list->cap = 64;
  n->list->count = 0;
  n->max = p->count;
  n->pos = 0;
}
void Node_parse_stmt(Stmt *, TIR_Block **);
void Node_parse_let_stmt(Stmt *, TIR_Block **);
Expr_result Node_parse_expr(Expr *);
void Node_set_source(char **s) { source = s; }
Node *Node_next(Node_Walker *n) {
  if (n->pos >= n->max)
    return NULL;
  return n->program->nodes[n->pos++];
}
void Node_parse_block(Stmt *stmt, TIR_Block **context) {
  typeof(stmt->block_stmt) blockstmt = stmt->block_stmt;
  int max = blockstmt.statements->count;
  int inx = 0;
  while (inx < max) {
    Stmt *stmt = list_Stmt_get(blockstmt.statements, inx);
    Node_parse_stmt(stmt, context);
    inx++;
  }
}

void Node_parse_stmt(Stmt *stmt, TIR_Block **context) {
  switch (stmt->kind) {
  case TSTMT_LET:
    Node_parse_let_stmt(stmt, context);
    return;
  default:
    tix_error(stmt->span, "Invalide Stmt", source, NULL);
  }
}

void Node_parse_let_stmt(Stmt *stmt, TIR_Block **context) {
  typeof(stmt->let_stmt) letstmt = stmt->let_stmt;
  TIR_Value *v;
  Expr_result ty = Node_parse_expr(letstmt.init);
  IR_Value(&v, letstmt.name, IR_Type_from_type(&ty.ty), ty.value, context);
  IR_Value_Store(&v, context);
}

Expr_result Node_parse_expr(Expr *expr) {
  Type ty;
  switch (expr->kind) {
  case TEXPR_EXPRINT: {
    return (Expr_result){.ty = TTYPE_I32,
                         IR_Value_Get_Constant_I32(expr->int_value)};
  }
  default:
    break;
  }
  return (Expr_result){.ty = ty, .value = NULL};
}
void Node_parse_fn(Item *item) {
  const char *function_name = item->fn.name;
  typeof(item->fn) function = item->fn;
  TIR_Function *fn;
  TIR_Module *m = IR_Get_mainmodule();
  TIR_Block *context;
  IR_Block(&context, "entry", NULL);
  if (function.body) {
    Node_parse_block(function.body, &context);
  }
  if (!m) {
    TIX_LOG(stderr, ERROR, "Main Module is null");
  }
  IR_Function(&fn, &m, function_name, context,
              IR_Type_from_type(item->fn.return_type));
}
void Node_add_inst(Node_Walker *n, TIR_Instruction *i) {
  IR_list_add(n->list, i);
}
void Node_parse_item(Item *item) {
  switch (item->kind) {
  case ITEM_FN: {
    Node_parse_fn(item);
  } break;
  default:
    printf("Invalid Item\n");
    exit(1);
  }
}

void Node_generate(Node_Walker *n) {
  while (n->pos < n->max) {
    Node *node = Node_next(n);
    switch (node->type) {
    case TNODE_ITEM: {
      Node_parse_item(node->node.item);
    } break;
    default:
      printf("Invalid Ast\n");
      exit(1);
    }
  }
}
